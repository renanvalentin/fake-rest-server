{"version":3,"sources":["../../server/validations/index.js"],"names":["headersLogger","bodyLogger","validateHeaders","req","res","next","template","validate","isValid","_","every","headers","value","header","debug","status","response","send","error","validateBody","body","create","setup","validations","templates","map","resolved","variables","undefined","url","match","route"],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\n\nimport _ from 'lodash';\n\nimport { resolveTemplate, log } from '../utils';\nimport type { Setup } from '../types';\n\nconst headersLogger = log('validations:headers');\nconst bodyLogger = log('validations:body');\n\nconst validateHeaders = (req, res, next) => (template, validate) => {\n  const isValid = _.every(validate.headers, (value, header) => {\n    if (req.headers[header] && req.headers[header] === value) {\n      return true;\n    }\n\n    headersLogger.debug('invalid: ', header, 'expected ', value, 'to equal', req.headers[header]);\n\n    return false;\n  });\n\n  if (!isValid) {\n    res.status(template.response.status).send(template.response.error);\n    return next(template.response.error);\n  }\n\n  return next();\n};\n\nconst validateBody = (req, res, next) => (template, validate) => {\n  const isValid = _.every(validate.body, (value, body) => {\n    if (req.body[body] && req.body[body] === '' && value === 'required') {\n      return true;\n    }\n\n    bodyLogger.debug('invalid: ', body, ' to be required');\n\n    return false;\n  });\n\n  if (!isValid) {\n    res.status(template.response.status).send(template.response.error);\n    return next(template.response.error);\n  }\n\n  return next();\n};\n\nexport const create = (setup: Setup) => {\n  const validations = setup.templates.map((template) => {\n    const resolved = resolveTemplate(template, { ...setup.variables, ...template.variables });\n\n    return (req, res, next) => {\n      const { validate } = resolved;\n\n      if (validate === undefined) {\n        return next();\n      }\n\n      if (req.url.match(resolved.route)) {\n        if (validate.headers !== undefined) {\n          return validateHeaders(req, res, next)(resolved, validate);\n        }\n\n        if (validate.body !== undefined) {\n          return validateBody(req, res, next)(resolved, validate);\n        }\n      }\n\n      return next();\n    };\n  });\n\n  return validations;\n};\n"]}