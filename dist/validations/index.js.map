{"version":3,"sources":["../../server/validations/index.js"],"names":["headersLogger","bodyLogger","checkRoute","name","RegExp","validateHeaders","req","res","next","template","validate","validation","_","find","headers","value","toBe","header","findKey","debug","method","status","send","error","validateBody","body","undefined","create","setup","validations","templates","map","resolved","variables","url","match","route"],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\n\nimport _ from 'lodash';\n\nimport { resolveTemplate, log } from '../utils';\nimport type { Setup } from '../types';\n\nconst headersLogger = log('validations:headers');\nconst bodyLogger = log('validations:body');\n\nconst checkRoute = name => new RegExp(`^${name}/?$`, 'i');\n\nconst validateHeaders = (req, res, next) => (template, validate) => {\n  const validation = _.find(validate.headers, (value, name) => {\n    if (req.headers[name] && req.headers[name] !== value.toBe) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (validation) {\n    const header = _.findKey(validate.headers, validation);\n\n    headersLogger.debug(\n      'invalid: ',\n      req.method,\n      validation,\n      'expected ',\n      validate.toBe,\n      'to equal',\n      req.headers[header],\n    );\n\n    res.status(validation.status).send(validation.error);\n    return next(validation.error);\n  }\n\n  return next();\n};\n\nconst validateBody = (req, res, next) => (template, validate) => {\n  const validation = _.find(validate.body, (value, body) => {\n    if (req.body[body] === undefined && value.toBe === 'required') {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (validation) {\n    const body = _.findKey(validate.body, validation);\n\n    bodyLogger.debug('invalid: ', body, ' to be required');\n\n    res.status(validation.status).send(validation.error);\n    return next(validation.error);\n  }\n\n  return next();\n};\n\nexport const create = (setup: Setup) => {\n  const validations = setup.templates.map((template) => {\n    const resolved = resolveTemplate(template, {\n      ...setup.variables,\n      ...template.variables,\n    });\n\n    return (req, res, next) => {\n      const { validate } = resolved;\n\n      if (validate === undefined) {\n        return next();\n      }\n\n      if (req.url.match(checkRoute(resolved.route))) {\n        if (validate.headers !== undefined) {\n          return validateHeaders(req, res, next)(resolved, validate);\n        }\n\n        if (validate.body !== undefined) {\n          return validateBody(req, res, next)(resolved, validate);\n        }\n      }\n\n      return next();\n    };\n  });\n\n  return validations;\n};\n"]}