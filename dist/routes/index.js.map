{"version":3,"sources":["../../server/routes/index.js"],"names":["logger","makeRoute","template","routeType","method","toLowerCase","type","path","route","status","response","query","body","headers","findRouteForRequest","routes","req","find","_","isEqual","defineRoute","router","name","res","matchedRoute","Object","entries","forEach","key","value","set","send","arrangeRoutes","iteratee","groupBy","groupedRoutesByType","groupedRoutesByPath","create","setup","Router","templates","map","routeMaker","arrangedRoutes","debug"],"mappings":";;;;;;;AAEA;;;;AAEA;;AAEA;;;;;;AAGA,MAAMA,SAAS,gBAAI,QAAJ,CAAf;;AAaA,MAAMC,YAA2BC,QAAD,IAAc;AAC5C,QAAMC,YAAYD,SAASE,MAAT,CAAgBC,WAAhB,EAAlB;;AAEA,SAAO;AACLC,UAAMH,SADD;AAELI,UAAML,SAASM,KAFV;AAGLC,YAAQP,SAASQ,QAAT,CAAkBD,MAHrB;AAILE,WAAOT,SAASS,KAAT,IAAkB,EAJpB;AAKLD,cAAUR,SAASQ,QAAT,CAAkBE,IALvB;AAMLC,aAASX,SAASQ,QAAT,CAAkBG,OAAlB,IAA6B;AANjC,GAAP;AAQD,CAXD;;AAaA,MAAMC,sBAAsB,CAACC,MAAD,EAASC,GAAT,KAC1BD,OAAOE,IAAP,CAAYT,SAASU,iBAAEC,OAAF,CAAUH,IAAIL,KAAd,EAAqBH,MAAMG,KAA3B,CAArB,CADF;;AAGA,MAAMS,cAAcC,UAAU,CAAC,EAAEf,IAAF,EAAQgB,IAAR,EAAcP,MAAd,EAAD;AAC5B;AACAM,OAAOf,IAAP,EAAagB,IAAb,EAAmB,CAACN,GAAD,EAAMO,GAAN,KAAc;AAC/B,QAAMC,eAAeV,oBAAoBC,MAApB,EAA4BC,GAA5B,CAArB;;AAEAS,SAAOC,OAAP,CAAeF,aAAaX,OAA5B,EAAqCc,OAArC,CAA6C,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC7DN,QAAIO,GAAJ,CAAQF,GAAR,EAAaC,KAAb;AACD,GAFD;;AAIAN,MAAId,MAAJ,CAAWe,aAAaf,MAAxB,EAAgCsB,IAAhC,CAAqCP,aAAad,QAAlD;AACD,CARD,CAFF;;AAYA,MAAMsB,gBAAgB,CAACjB,MAAD,EAASkB,QAAT,KACpBf,iBAAES,OAAF,CAAUT,iBAAEgB,OAAF,CAAUnB,MAAV,EAAkB,MAAlB,CAAV,EAAqC,CAACoB,mBAAD,EAAsB7B,IAAtB,KAA+B;AAClEY,mBAAES,OAAF,CAAUT,iBAAEgB,OAAF,CAAUC,mBAAV,EAA+B,MAA/B,CAAV,EAAkD,CAACC,mBAAD,EAAsBd,IAAtB,KAA+B;AAC/EW,aAAS;AACP3B,UADO;AAEPgB,UAFO;AAGPP,cAAQqB;AAHD,KAAT;AAKD,GAND;AAOD,CARD,CADF;;AAWO,MAAMC;AAAA,+BAAS,WAAOC,KAAP,EAAwB;AAC5C,UAAMjB,SAAS,IAAIkB,eAAJ,EAAf;;AAEA,UAAMxB,SAASuB,MAAME,SAAN,CAAgBC,GAAhB,CAAoB;AAAA,aAAYxC,UAAUC,QAAV,CAAZ;AAAA,KAApB,CAAf;;AAEA,UAAMwC,aAAatB,YAAYC,MAAZ,CAAnB;;AAEAW,kBAAcjB,MAAd,EAAsB,UAAC,EAAET,IAAF,EAAQgB,IAAR,EAAcP,QAAQ4B,cAAtB,EAAD,EAA4C;AAChE3C,aAAO4C,KAAP,CAAa,SAAb,EAAwBD,cAAxB;;AAEA;AACAD,iBAAW;AACTpC,YADS;AAETgB,YAFS;AAGTP,gBAAQ4B;AAHC,OAAX;AAKD,KATD;;AAWA,WAAOtB,MAAP;AACD,GAnBY;;AAAA;AAAA;AAAA;AAAA,IAAN","file":"index.js","sourcesContent":["/* @flow */\n\nimport _ from 'lodash';\n\nimport { Router } from 'express';\n\nimport { log } from '../utils';\nimport type { Setup, Template } from '../types';\n\nconst logger = log('routes');\n\ntype MakeRouteDef = (\n  template: Template,\n) => {\n  type: string,\n  path: string,\n  status: number,\n  query: {},\n  response: { [key: string]: string },\n  headers: { [key: string]: string },\n};\n\nconst makeRoute: MakeRouteDef = (template) => {\n  const routeType = template.method.toLowerCase();\n\n  return {\n    type: routeType,\n    path: template.route,\n    status: template.response.status,\n    query: template.query || {},\n    response: template.response.body,\n    headers: template.response.headers || {},\n  };\n};\n\nconst findRouteForRequest = (routes, req) =>\n  routes.find(route => _.isEqual(req.query, route.query));\n\nconst defineRoute = router => ({ type, name, routes }) =>\n  // $FlowFixMe\n  router[type](name, (req, res) => {\n    const matchedRoute = findRouteForRequest(routes, req);\n\n    Object.entries(matchedRoute.headers).forEach(([key, value]) => {\n      res.set(key, value);\n    });\n\n    res.status(matchedRoute.status).send(matchedRoute.response);\n  });\n\nconst arrangeRoutes = (routes, iteratee) =>\n  _.forEach(_.groupBy(routes, 'type'), (groupedRoutesByType, type) => {\n    _.forEach(_.groupBy(groupedRoutesByType, 'path'), (groupedRoutesByPath, name) => {\n      iteratee({\n        type,\n        name,\n        routes: groupedRoutesByPath,\n      });\n    });\n  });\n\nexport const create = async (setup: Setup) => {\n  const router = new Router();\n\n  const routes = setup.templates.map(template => makeRoute(template));\n\n  const routeMaker = defineRoute(router);\n\n  arrangeRoutes(routes, ({ type, name, routes: arrangedRoutes }) => {\n    logger.debug('created', arrangedRoutes);\n\n    // $FlowFixMe\n    routeMaker({\n      type,\n      name,\n      routes: arrangedRoutes,\n    });\n  });\n\n  return router;\n};\n"]}