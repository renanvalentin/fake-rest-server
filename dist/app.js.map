{"version":3,"sources":["../server/app.js"],"names":["info","createApp","setup","app","config","loglevel","use","options","bodyParser","json","forEach","validation","routes","routeNotFoundHandler","errorHandler","startApp","listen","port"],"mappings":";;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;AACA;;AACA;;;;;;AAIA,MAAM,EAAEA,IAAF,KAAW,gBAAI,KAAJ,CAAjB;;AAEO,MAAMC;AAAA,+BAAY,WAAOC,KAAP,EAAwB;AAC/C,UAAMC,MAAM,wBAAZ;;AAEA,4BAAYC,iBAAOC,QAAnB;;AAEAF,QAAIG,GAAJ,CAAQ,8BAAkBF,iBAAOC,QAAzB,CAAR;AACAF,QAAIG,GAAJ,CAAQ,4BAAR;;AAEAH,QAAII,OAAJ,CAAY,GAAZ,EAAiB,qBAAjB;AACAJ,QAAIG,GAAJ,CAAQ,qBAAR;;AAEAH,QAAIG,GAAJ,CAAQE,qBAAWC,IAAX,EAAR;;AAEA,6BAAkBP,KAAlB,EAAyBQ,OAAzB,CAAiC;AAAA,aAAcP,IAAIG,GAAJ,CAAQK,UAAR,CAAd;AAAA,KAAjC;AACA,6BAAkBT,KAAlB,EAAyBQ,OAAzB,CAAiC;AAAA,aAAcP,IAAIG,GAAJ,CAAQK,UAAR,CAAd;AAAA,KAAjC;;AAEA,UAAMC,SAAS,MAAM,oBAAaV,KAAb,CAArB;;AAEAC,QAAIG,GAAJ,CAAQM,MAAR;;AAEAT,QAAIG,GAAJ,CAAQO,2BAAR;AACAV,QAAIG,GAAJ,CAAQQ,mBAAR;;AAEA,WAAOX,GAAP;AACD,GAxBY;;AAAA;AAAA;AAAA;AAAA,IAAN;;AA0BA,MAAMY,8BAAYZ,GAAD,IACtBA,IAAIa,MAAJ,CAAWZ,iBAAOa,IAAlB,EAAwB,MAAM;AAC5BjB,OAAM,qCAAoCI,iBAAOa,IAAK,EAAtD;AACD,CAFD,CADK","file":"app.js","sourcesContent":["/* @flow */\n\nimport compression from 'compression';\nimport express from 'express';\nimport type { $Application } from 'express';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\n\nimport config from './config';\nimport { create as createRoutes } from './routes';\nimport { create as createValidations } from './validations';\nimport { create as createSimulations } from './simulations';\nimport { log, loggingMiddleware, setloglevel, routeNotFoundHandler, errorHandler } from './utils';\n\nimport type { Setup } from './types';\n\nconst { info } = log('app');\n\nexport const createApp = async (setup: Setup) => {\n  const app = express();\n\n  setloglevel(config.loglevel);\n\n  app.use(loggingMiddleware(config.loglevel));\n  app.use(compression());\n\n  app.options('*', cors());\n  app.use(cors());\n\n  app.use(bodyParser.json());\n\n  createValidations(setup).forEach(validation => app.use(validation));\n  createSimulations(setup).forEach(validation => app.use(validation));\n\n  const routes = await createRoutes(setup);\n\n  app.use(routes);\n\n  app.use(routeNotFoundHandler);\n  app.use(errorHandler);\n\n  return app;\n};\n\nexport const startApp = (app: $Application): ?Server =>\n  app.listen(config.port, () => {\n    info(`The server is now running on port ${config.port}`);\n  });\n"]}