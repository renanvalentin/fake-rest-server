{"version":3,"sources":["../../server/__integrations__/app.js"],"names":["it","setup","variables","host","rootDir","templates","hero","method","route","response","body","name","photos","headers","status","app","get","expect","res","toEqual","text","toMatchSnapshot","validate","toBe","error","detail","set","done","timeout","delay","simulate","deadline","catch","err","message","post","send","query","power"],"mappings":"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","file":"app.js","sourcesContent":["/* @flow */\n\nimport supertest from 'supertest';\n\nimport { createApp } from '../app';\n\nit('returns simple response', async () => {\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: '../../',\n    },\n    templates: [\n      {\n        variables: {\n          hero: 'spider',\n        },\n        method: 'get',\n        route: '/heroes/<%= hero %>',\n        response: {\n          body: {\n            name: '<%= hero %>',\n            photos: '<%= host %>/<%= hero %>/photos',\n          },\n          headers: {\n            'x-force': '<%= hero %>',\n          },\n          status: 200,\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  return supertest(app)\n    .get('/heroes/spider')\n    .expect((res) => {\n      expect(res.headers['x-force']).toEqual('spider');\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(200);\n});\n\nit('validates the header', async () => {\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: '../../',\n    },\n    templates: [\n      {\n        variables: {\n          hero: 'spider',\n        },\n        method: 'get',\n        route: '/heroes/<%= hero %>',\n        response: {\n          body: {\n            name: '<%= hero %>',\n            photos: '<%= host %>/<%= hero %>/photos',\n          },\n          status: 200,\n        },\n        validate: {\n          headers: {\n            'content-type': {\n              toBe: 'application/json',\n              error: {\n                detail: '<%= hero %> is not feeling well',\n              },\n              status: 400,\n            },\n          },\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  return supertest(app)\n    .get('/heroes/spider')\n    .set('content-type', 'application/bla')\n    .expect((res) => {\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(400);\n});\n\nit('loads an external response body', async () => {\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: './',\n    },\n    templates: [\n      {\n        variables: {\n          hero: 'spider',\n        },\n        method: 'get',\n        route: '/heroes/<%= hero %>',\n        response: {\n          body: '<%= rootDir %>server/__integrations__/fixture.json',\n          status: 200,\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  return supertest(app)\n    .get('/heroes/spider')\n    .expect((res) => {\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(200);\n});\n\nit('simulate timeout', async (done) => {\n  const timeout = 100;\n  const delay = 10;\n\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: './',\n    },\n    templates: [\n      {\n        variables: {\n          hero: 'spider',\n        },\n        method: 'get',\n        route: '/heroes/<%= hero %>',\n        response: {\n          body: {},\n          status: 200,\n        },\n        simulate: {\n          timeout: timeout + delay,\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  return supertest(app)\n    .get('/heroes/spider')\n    .timeout({ response: timeout, deadline: timeout })\n    .catch((err) => {\n      expect(err.message).toEqual(`Timeout of ${timeout}ms exceeded`);\n      done();\n    });\n});\n\nit('validates body payload', async () => {\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: '../../',\n    },\n    templates: [\n      {\n        variables: {\n          hero: 'spider',\n        },\n        method: 'post',\n        route: '/heroes/<%= hero %>',\n        response: {\n          body: {\n            name: '<%= hero %>',\n            photos: '<%= host %>/<%= hero %>/photos',\n          },\n          status: 200,\n        },\n        validate: {\n          body: {\n            name: {\n              toBe: 'required',\n              error: {\n                detail: '<%= hero %> is not feeling well',\n              },\n              status: 400,\n            },\n          },\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  return supertest(app)\n    .post('/heroes/spider')\n    .send('bla=name is missing')\n    .set('Accept', 'application/json')\n\n    .expect((res) => {\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(400);\n});\n\nit('filter router by query string', async () => {\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: '../../',\n    },\n    templates: [\n      {\n        variables: {\n          hero: 'spider',\n        },\n        method: 'get',\n        route: '/heroes/<%= hero %>',\n        query: {\n          power: 'true',\n        },\n        response: {\n          body: {\n            name: '<%= hero %>',\n            power: 'spider sense',\n          },\n          status: 200,\n        },\n      },\n      {\n        variables: {\n          hero: 'spider',\n        },\n        method: 'get',\n        route: '/heroes/<%= hero %>',\n        response: {\n          body: {\n            name: '<%= hero %>',\n            photos: '<%= host %>/<%= hero %>/photos',\n          },\n          status: 200,\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  return supertest(app)\n    .get('/heroes/spider?power=true')\n    .expect((res) => {\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(200);\n});\n\nit('loads external templates for different keys', async () => {\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: './',\n    },\n    templates: [\n      {\n        variables: {\n          hero: 'spider',\n        },\n        method: 'get',\n        route: '/heroes/<%= hero %>',\n        response: {\n          body: '<%= rootDir %>server/__integrations__/fixture.json',\n          status: 200,\n        },\n        validate: {\n          body: '<%= rootDir %>server/__integrations__/body_validation.json',\n          headers: '<%= rootDir %>server/__integrations__/headers_validation.json',\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  await supertest(app)\n    .get('/heroes/spider')\n    .set('content-type', 'application/json')\n    .expect((res) => {\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(200);\n\n  await supertest(app)\n    .get('/heroes/spider')\n    .set('content-type', 'application/bla')\n    .expect((res) => {\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(400);\n\n  await supertest(app)\n    .post('/heroes/spider')\n    .send('bla=name is missing')\n    .set('Accept', 'application/json')\n\n    .expect((res) => {\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(400);\n});\n"]}