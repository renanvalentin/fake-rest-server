{"version":3,"sources":["../../../server/purchaseService/index.js"],"names":["logger","resolveZTokenOrCredentialToken","ztoken","undefined","Promise","resolve","type","secret","sessionFromWebUIID","webUIID","response","config","purchaseService","query","webui_id","headers","authorization","session","JSON","parse","body","items","id","url","self","selection","checkout","payment_selection","href","metaInfo","meta_info","token","err","error"],"mappings":";;;;;;;AAEA;;;;AAEA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,SAAS,kBAAI,iBAAJ,CAAf;;AASA,MAAMC,iCAAiCC,UACpCA,WAAWC,SAAX,GACGC,QAAQC,OAAR,CAAgB,EAAEC,MAAM,QAAR,EAAkBC,QAAQL,MAA1B,EAAhB,CADH,GAEG,6BAHN;;AAOO,MAAMM;AAAA,+BAA4C,WAAOC,OAAP,EAAgBP,MAAhB,EAA2B;AAClF,QAAI;AACF,YAAM,EAAEI,IAAF,EAAQC,MAAR,KAAmB,MAAMN,+BAA+BC,MAA/B,CAA/B;;AAEA,YAAMQ,WAAW,MAAM,mBAAK,GAAEC,iBAAOC,eAAgB,WAA9B,EAA0C;AAC/DC,eAAO;AACLC,oBAAUL;AADL,SADwD;AAI/DM,iBAAS;AACPC,yBAAgB,GAAEV,IAAK,IAAGC,MAAO,EAD1B;AAEP,0BAAgB;AAFT;AAJsD,OAA1C,CAAvB;;AAUA,YAAMU,UAAUC,KAAKC,KAAL,CAAWT,SAASU,IAApB,EAA0BC,KAA1B,CAAgC,CAAhC,CAAhB;;AAEA,aAAO;AACLC,YAAIL,QAAQK,EADP;AAELC,aAAKN,QAAQO,IAFR;AAGLC,mBAAWR,QAAQS,QAAR,CAAiBC,iBAAjB,CAAmCC,IAHzC;AAILC,kBAAUZ,QAAQa,SAAR,CAAkBF,IAJvB;AAKLG,eAAOrB,SAASK,OAAT,CAAiB,iBAAjB;AALF,OAAP;AAOD,KAtBD,CAsBE,OAAOiB,GAAP,EAAY;AACZhC,aAAOiC,KAAP,CAAaD,GAAb;;AAEA,YAAMA,GAAN;AACD;AACF,GA5BY;;AAAA;AAAA;AAAA;AAAA,IAAN","file":"index.js","sourcesContent":["/* @flow */\n\nimport got from 'got';\n\nimport { log } from '../utils/logging';\nimport { purchaseService as purchaseServiceOAuthToken } from '../oauth/token';\nimport config from '../config';\n\nconst logger = log('purchaseService');\n\ntype Session = {\n  id: string,\n  url: string,\n  metaInfo: string,\n  token: string,\n};\n\nconst resolveZTokenOrCredentialToken = ztoken =>\n  (ztoken !== undefined\n    ? Promise.resolve({ type: 'Bearer', secret: ztoken })\n    : purchaseServiceOAuthToken());\n\ntype SessionFromWebUIIDDef = (webUIID: string, ztoken?: string) => Promise<Session>;\n\nexport const sessionFromWebUIID: SessionFromWebUIIDDef = async (webUIID, ztoken) => {\n  try {\n    const { type, secret } = await resolveZTokenOrCredentialToken(ztoken);\n\n    const response = await got(`${config.purchaseService}/sessions`, {\n      query: {\n        webui_id: webUIID,\n      },\n      headers: {\n        authorization: `${type} ${secret}`,\n        'Content-type': 'application/vnd.zalando.purchase-session+json',\n      },\n    });\n\n    const session = JSON.parse(response.body).items[0];\n\n    return {\n      id: session.id,\n      url: session.self,\n      selection: session.checkout.payment_selection.href,\n      metaInfo: session.meta_info.href,\n      token: response.headers['x-session-token'],\n    };\n  } catch (err) {\n    logger.error(err);\n\n    throw err;\n  }\n};\n"]}