{"version":3,"sources":["../../../server/translationService/index.js"],"names":["logger","fetch","ids","token","response","config","translationService","query","id","headers","authorization","JSON","parse","body","err","error"],"mappings":";;;;;;;AAEA;;;;AAEA;;;;AACA;;;;;;AAEA,MAAMA,SAAS,kBAAI,oBAAJ,CAAf;;AAYO,MAAMC;AAAA,+BAAkB,WAAO,EAAEC,GAAF,EAAOC,KAAP,EAAP,EAA0B;AACvD,QAAI;AACF,YAAMC,WAAW,MAAM,mBAAIC,iBAAOC,kBAAX,EAA+B;AACpDC,eAAO;AACLC,cAAIN;AADC,SAD6C;AAIpDO,iBAAS;AACPC,yBAAgB,UAASP,KAAM,EADxB;AAEP,0BAAgB,kBAFT;AAGP,6BAAmB;AAHZ;AAJ2C,OAA/B,CAAvB;;AAWA,aAAOQ,KAAKC,KAAL,CAAWR,SAASS,IAApB,CAAP;AACD,KAbD,CAaE,OAAOC,GAAP,EAAY;AACZd,aAAOe,KAAP,CAAaD,GAAb;;AAEA,YAAMA,GAAN;AACD;AACF,GAnBY;;AAAA;AAAA;AAAA;AAAA,IAAN","file":"index.js","sourcesContent":["/* @flow */\n\nimport got from 'got';\n\nimport config from '../config';\nimport { log } from '../utils/logging';\n\nconst logger = log('translationService');\n\ntype Translation = {\n  context: string,\n  language: string,\n  id: string,\n  text: string,\n  active: boolean,\n};\n\ntype FetchDef = ({ ids: Array<string>, token: string }) => Promise<Array<Translation>>;\n\nexport const fetch: FetchDef = async ({ ids, token }) => {\n  try {\n    const response = await got(config.translationService, {\n      query: {\n        id: ids,\n      },\n      headers: {\n        authorization: `Bearer ${token}`,\n        'Content-type': 'application/json',\n        'Accept-language': 'en-GB',\n      },\n    });\n\n    return JSON.parse(response.body);\n  } catch (err) {\n    logger.error(err);\n\n    throw err;\n  }\n};\n"]}