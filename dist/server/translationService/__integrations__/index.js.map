{"version":3,"sources":["../../../../server/translationService/__integrations__/index.js"],"names":["jest","mock","requestStub","fn","beforeEach","got","mockImplementation","url","options","it","ids","token","response","context","language","id","text","active","mockReturnValue","Promise","resolve","body","JSON","stringify","translation","expect","toEqual","toHaveBeenCalledWith","config","translationService","query","headers","authorization","reject","Error","err","message"],"mappings":";;AAEA;;;;AAEA;;;;AAEA;;;;;;AAEAA,KAAKC,IAAL,CAAU,KAAV;;AAEA,MAAMC,cAAcF,KAAKG,EAAL,EAApB;;AAEAC,WAAW,MAAM;AACfC,gBAAIC,kBAAJ,CAAuB,CAACC,GAAD,EAAMC,OAAN,KAAkBN,YAAYK,GAAZ,EAAiBC,OAAjB,CAAzC;AACD,CAFD;;AAIAC,GAAG,sCAAH,oBAA2C,aAAY;AACrD,QAAMC,MAAM,CAAC,gCAAD,EAAmC,0BAAnC,CAAZ;AACA,QAAMC,QAAQ,YAAd;;AAEA,QAAMC,WAAW,CACf;AACEC,aAAS,SADX;AAEEC,cAAU,IAFZ;AAGEC,QAAI,gCAHN;AAIEC,UAAM,gBAJR;AAKEC,YAAQ;AALV,GADe,EAQf;AACEJ,aAAS,SADX;AAEEC,cAAU,IAFZ;AAGEC,QAAI,gCAHN;AAIEC,UAAM,gBAJR;AAKEC,YAAQ;AALV,GARe,CAAjB;;AAiBAf,cAAYgB,eAAZ,CAA4BC,QAAQC,OAAR,CAAgB,EAAEC,MAAMC,KAAKC,SAAL,CAAeX,QAAf,CAAR,EAAhB,CAA5B;;AAEA,QAAMY,cAAc,MAAM,kBAAM;AAC9Bd,OAD8B;AAE9BC;AAF8B,GAAN,CAA1B;;AAKAc,SAAOD,WAAP,EAAoBE,OAApB,CAA4Bd,QAA5B;AACAa,SAAOvB,WAAP,EAAoByB,oBAApB,CAAyCC,iBAAOC,kBAAhD,EAAoE;AAClEC,WAAO;AACLf,UAAIL;AADC,KAD2D;AAIlEqB,aAAS;AACPC,qBAAgB,UAASrB,KAAM,EADxB;AAEP,sBAAgB,kBAFT;AAGP,yBAAmB;AAHZ;AAJyD,GAApE;AAUD,CAvCD;;AAyCAF,GAAG,yCAAH,oBAA8C,aAAY;AACxD,QAAMC,MAAM,CAAC,gCAAD,CAAZ;AACA,QAAMC,QAAQ,YAAd;;AAEAT,cAAYgB,eAAZ,CAA4BC,QAAQc,MAAR,CAAe,IAAIC,KAAJ,CAAU,MAAV,CAAf,CAA5B;;AAEA,MAAI;AACF,UAAM,kBAAM;AACVxB,SADU;AAEVC;AAFU,KAAN,CAAN;AAID,GALD,CAKE,OAAOwB,GAAP,EAAY;AACZV,WAAOU,IAAIC,OAAX,EAAoBV,OAApB,CAA4B,MAA5B;AACD;AACF,CAdD","file":"index.js","sourcesContent":["/* @flow */\n\nimport got from 'got';\n\nimport config from '../../config';\n\nimport { fetch } from '../index';\n\njest.mock('got');\n\nconst requestStub = jest.fn();\n\nbeforeEach(() => {\n  got.mockImplementation((url, options) => requestStub(url, options));\n});\n\nit('should return the dialog cancel text', async () => {\n  const ids = ['zalando.checkout.header.secure', 'mobile.app.dialog.cancel'];\n  const token = 'some-token';\n\n  const response = [\n    {\n      context: 'shop.DE',\n      language: 'en',\n      id: 'zalando.checkout.header.secure',\n      text: 'Secure payment',\n      active: true,\n    },\n    {\n      context: 'shop.DE',\n      language: 'en',\n      id: 'zalando.checkout.header.secure',\n      text: 'Secure payment',\n      active: true,\n    },\n  ];\n\n  requestStub.mockReturnValue(Promise.resolve({ body: JSON.stringify(response) }));\n\n  const translation = await fetch({\n    ids,\n    token,\n  });\n\n  expect(translation).toEqual(response);\n  expect(requestStub).toHaveBeenCalledWith(config.translationService, {\n    query: {\n      id: ids,\n    },\n    headers: {\n      authorization: `Bearer ${token}`,\n      'Content-type': 'application/json',\n      'Accept-language': 'en-GB',\n    },\n  });\n});\n\nit('should throw an error the request fails', async () => {\n  const ids = ['zalando.checkout.header.secure'];\n  const token = 'some-token';\n\n  requestStub.mockReturnValue(Promise.reject(new Error('Ops!')));\n\n  try {\n    await fetch({\n      ids,\n      token,\n    });\n  } catch (err) {\n    expect(err.message).toEqual('Ops!');\n  }\n});\n"]}