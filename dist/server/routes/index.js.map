{"version":3,"sources":["../../../server/routes/index.js"],"names":["readFileAsync","readFile","loadReponse","path","process","cwd","then","str","JSON","parse","parseTemplate","template","variables","Promise","res","resolved","response","body","makeRoute","parsedTemplate","routeType","method","toLowerCase","type","route","status","create","setup","router","Router","queue","templates","map","routes","all","forEach","req","send"],"mappings":";;;;;;;;;AAEA;;AACA;;AACA;;AAEA;;AAEA;;;;AAGA,MAAMA,gBAAgB,qBAAUC,YAAV,CAAtB;;AAIA,MAAMC,cAA+BC,QACnCH,cAAc,gBAASI,QAAQC,GAAR,EAAT,EAAwBF,IAAxB,CAAd,EAA6C,OAA7C,EAAsDG,IAAtD,CAA2DC,OAAOC,KAAKC,KAAL,CAAWF,GAAX,CAAlE,CADF;;AAKA,MAAMG,gBAAkC,CAACC,QAAD,EAAWC,SAAX,KACtC,IAAIC,OAAJ;AAAA,+BAAY,WAAOC,GAAP,EAAe;AACzB,UAAMC,WAAW,4BAAgBJ,QAAhB,eAA+BC,SAA/B,EAA6CD,SAASC,SAAtD,EAAjB;;AAEA,QAAI,OAAOD,SAASK,QAAT,CAAkBC,IAAzB,KAAkC,QAAtC,EAAgD;AAC9C,YAAMA,OAAO,MAAMf,YAAYa,SAASC,QAAT,CAAkBC,IAA9B,CAAnB;;AAEA,aAAOH,iBACFH,QADE;AAELK,+BACKL,SAASK,QADd;AAEEC;AAFF;AAFK,SAAP;AAOD;;AAED,WAAOH,IAAIH,QAAJ,CAAP;AACD,GAhBD;;AAAA;AAAA;AAAA;AAAA,KADF;;AA6BA,MAAMO,YAA0B,CAACP,QAAD,EAAWC,SAAX,KAC9B,IAAIC,OAAJ;AAAA,gCAAY,WAAOC,GAAP,EAAe;AACzB,UAAMK,iBAAiB,MAAMT,cAAcC,QAAd,EAAwBC,SAAxB,CAA7B;;AAEA,UAAMG,WAAW,4BAAgBI,cAAhB,eAAqCP,SAArC,EAAmDD,SAASC,SAA5D,EAAjB;;AAEA,UAAMQ,YAAYL,SAASM,MAAT,CAAgBC,WAAhB,EAAlB;;AAEA,WAAOR,IAAI;AACTS,YAAMH,SADG;AAETjB,YAAMY,SAASS,KAFN;AAGTC,cAAQV,SAASC,QAAT,CAAkBS,MAHjB;AAITT,gBAAUD,SAASC,QAAT,CAAkBC;AAJnB,KAAJ,CAAP;AAMD,GAbD;;AAAA;AAAA;AAAA;AAAA,KADF;;AAgBO,MAAMS;AAAA,gCAAS,WAAOC,KAAP,EAAwB;AAC5C,UAAMC,SAAS,IAAIC,eAAJ,EAAf;;AAEA,UAAMC,QAAQH,MAAMI,SAAN,CAAgBC,GAAhB,CAAoB;AAAA,aAAYd,UAAUP,QAAV,EAAoBgB,MAAMf,SAA1B,CAAZ;AAAA,KAApB,CAAd;;AAEA,UAAMqB,SAAS,MAAMpB,QAAQqB,GAAR,CAAYJ,KAAZ,CAArB;;AAEAG,WAAOE,OAAP,CAAe,UAACX,KAAD,EAAW;AACxB;AACAI,aAAOJ,MAAMD,IAAb,EAAmBC,MAAMrB,IAAzB,EAA+B,UAACiC,GAAD,EAAMtB,GAAN;AAAA,eAAcA,IAAIW,MAAJ,CAAWD,MAAMC,MAAjB,EAAyBY,IAAzB,CAA8Bb,MAAMR,QAApC,CAAd;AAAA,OAA/B;AACD,KAHD;;AAKA,WAAOY,MAAP;AACD,GAbY;;AAAA;AAAA;AAAA;AAAA,IAAN","file":"index.js","sourcesContent":["/* @flow */\n\nimport { readFile } from 'fs';\nimport { promisify } from 'util';\nimport { join as joinPath } from 'path';\n\nimport { Router } from 'express';\n\nimport { resolveTemplate } from '../utils';\nimport type { Setup, Template, Variables } from '../types';\n\nconst readFileAsync = promisify(readFile);\n\ntype LoadResponseDef = (path: string) => Promise<{}>;\n\nconst loadReponse: LoadResponseDef = path =>\n  readFileAsync(joinPath(process.cwd(), path), 'utf-8').then(str => JSON.parse(str));\n\ntype ParseTemplateDef = (template: Template, variables: Variables) => Promise<Template>;\n\nconst parseTemplate: ParseTemplateDef = (template, variables) =>\n  new Promise(async (res) => {\n    const resolved = resolveTemplate(template, { ...variables, ...template.variables });\n\n    if (typeof template.response.body === 'string') {\n      const body = await loadReponse(resolved.response.body);\n\n      return res({\n        ...template,\n        response: {\n          ...template.response,\n          body,\n        },\n      });\n    }\n\n    return res(template);\n  });\n\ntype MakeRouteDef = (\n  template: Template,\n  variables: Variables,\n) => Promise<{\n  type: string,\n  path: string,\n  status: number,\n  response: { [key: string]: string },\n}>;\n\nconst makeRoute: MakeRouteDef = (template, variables) =>\n  new Promise(async (res) => {\n    const parsedTemplate = await parseTemplate(template, variables);\n\n    const resolved = resolveTemplate(parsedTemplate, { ...variables, ...template.variables });\n\n    const routeType = resolved.method.toLowerCase();\n\n    return res({\n      type: routeType,\n      path: resolved.route,\n      status: resolved.response.status,\n      response: resolved.response.body,\n    });\n  });\n\nexport const create = async (setup: Setup) => {\n  const router = new Router();\n\n  const queue = setup.templates.map(template => makeRoute(template, setup.variables));\n\n  const routes = await Promise.all(queue);\n\n  routes.forEach((route) => {\n    // $FlowFixMe\n    router[route.type](route.path, (req, res) => res.status(route.status).send(route.response));\n  });\n\n  return router;\n};\n"]}