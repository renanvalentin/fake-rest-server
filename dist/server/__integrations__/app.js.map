{"version":3,"sources":["../../../server/__integrations__/app.js"],"names":["it","setup","variables","host","rootDir","templates","id","method","route","response","body","name","delete","status","app","get","expect","res","text","toMatchSnapshot","error","detail","validate","headers","set","done","timeout","delay","simulate","deadline","catch","err","message","toEqual","post","send"],"mappings":"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","file":"app.js","sourcesContent":["/* @flow */\n\nimport supertest from 'supertest';\n\nimport { createApp } from '../app';\n\nit('returns simple response', async () => {\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: '../../',\n    },\n    templates: [\n      {\n        variables: {\n          id: 'paypal',\n        },\n        method: 'get',\n        route: '/session/<%= id %>',\n        response: {\n          body: {\n            id: '<%= id %>',\n            name: 'Paypal',\n            delete: '/session/<%= id %>',\n          },\n          status: 200,\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  return supertest(app)\n    .get('/session/paypal')\n    .expect((res) => {\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(200);\n});\n\nit('validates the header', async () => {\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: '../../',\n    },\n    templates: [\n      {\n        variables: {\n          id: 'paypal',\n        },\n        method: 'get',\n        route: '/session/<%= id %>',\n        response: {\n          body: {\n            id: '<%= id %>',\n            name: 'Paypal',\n            delete: '/session/<%= id %>',\n          },\n          error: {\n            detail: '<%= id %> is not feeling well',\n          },\n          status: 400,\n        },\n        validate: {\n          headers: {\n            'content-type': 'application/json',\n          },\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  return supertest(app)\n    .get('/session/paypal')\n    .set('content-type', 'application/bla')\n    .expect((res) => {\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(400);\n});\n\nit('loads an external response body', async () => {\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: './',\n    },\n    templates: [\n      {\n        variables: {\n          id: 'cc',\n        },\n        method: 'get',\n        route: '/session/<%= id %>',\n        response: {\n          body: '<%= rootDir %>server/__integrations__/fixture.json',\n          status: 200,\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  return supertest(app)\n    .get('/session/cc')\n    .expect((res) => {\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(200);\n});\n\nit('simulate timeout', async (done) => {\n  const timeout = 100;\n  const delay = 10;\n\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: './',\n    },\n    templates: [\n      {\n        variables: {\n          id: 'cc',\n        },\n        method: 'get',\n        route: '/session/<%= id %>',\n        response: {\n          body: {},\n          error: {},\n          status: 200,\n        },\n        simulate: {\n          timeout: timeout + delay,\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  return supertest(app)\n    .get('/session/cc')\n    .timeout({ response: timeout, deadline: timeout })\n    .catch((err) => {\n      expect(err.message).toEqual(`Timeout of ${timeout}ms exceeded`);\n      done();\n    });\n});\n\nit('validates body payload', async () => {\n  const setup = {\n    variables: {\n      host: 'http://localhost:3000',\n      rootDir: '../../',\n    },\n    templates: [\n      {\n        variables: {\n          id: 'paypal',\n        },\n        method: 'post',\n        route: '/session/<%= id %>',\n        response: {\n          body: {\n            id: '<%= id %>',\n            name: 'Paypal',\n            delete: '/session/<%= id %>',\n          },\n          error: {\n            detail: '<%= id %> is not feeling well',\n          },\n          status: 400,\n        },\n        validate: {\n          body: {\n            name: 'required',\n          },\n        },\n      },\n    ],\n  };\n\n  const app = await createApp(setup);\n\n  return supertest(app)\n    .post('/session/paypal')\n    .send('bla=name is missing')\n    .set('Accept', 'application/json')\n\n    .expect((res) => {\n      expect(res.text).toMatchSnapshot();\n    })\n    .expect(400);\n});\n"]}