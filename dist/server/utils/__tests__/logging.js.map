{"version":3,"sources":["../../../../server/utils/__tests__/logging.js"],"names":["fakeToken","describe","app","beforeAll","use","_","res","sendStatus","it","capture","promise","hookStd","stdout","output","unhook","get","set","expect","includes","toEqual"],"mappings":";;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,MAAMA,YAAY,4CAAlB;;AAEAC,SAAS,oBAAT,EAA+B,MAAM;AACnC,MAAIC,GAAJ;;AAEAC,YAAU,MAAM;AACdD,UAAM,wBAAN;AACAA,QAAIE,GAAJ,CAAQ,yBAAkB,MAAlB,CAAR;AACAF,QAAIE,GAAJ,CAAQ,CAACC,CAAD,EAAcC,GAAd,KAAiCA,IAAIC,UAAJ,CAAe,GAAf,CAAzC;AACD,GAJD;;AAMAC,KAAG,+CAAH,oBAAoD,aAAY;AAC9D,QAAIC,UAAU,EAAd;;AAEA,UAAMC,UAAUC,kBAAQC,MAAR,CAAe,UAACC,MAAD,EAASC,MAAT,EAAoB;AACjDA;AACAL,gBAAUI,MAAV;AACD,KAHe,CAAhB;;AAKA,UAAM,yBAAUX,GAAV,EACHa,GADG,CACC,GADD,EAEHC,GAFG,CAEC,eAFD,EAEmB,UAAShB,SAAU,EAFtC,EAGHiB,MAHG,CAGI,GAHJ,CAAN;;AAKA,UAAMP,OAAN;;AAEAO,WAAOR,QAAQS,QAAR,CAAiBlB,SAAjB,CAAP,EAAoCmB,OAApC,CAA4C,KAA5C;AACD,GAhBD;;AAkBAX,KAAG,0CAAH,oBAA+C,aAAY;AACzD,QAAIC,UAAU,EAAd;;AAEA,UAAMC,UAAUC,kBAAQC,MAAR,CAAe,UAACC,MAAD,EAASC,MAAT,EAAoB;AACjDA;AACAL,gBAAUI,MAAV;AACD,KAHe,CAAhB;;AAKA,UAAM,yBAAUX,GAAV,EACHa,GADG,CACE,YAAWf,SAAU,EADvB,EAEHiB,MAFG,CAEI,GAFJ,CAAN;;AAIA,UAAMP,OAAN;AACAO,WAAOR,QAAQS,QAAR,CAAiBlB,SAAjB,CAAP,EAAoCmB,OAApC,CAA4C,KAA5C;AACD,GAdD;AAeD,CA1CD","file":"logging.js","sourcesContent":["/* @flow */\n\nimport supertest from 'supertest';\nimport hookStd from 'hook-std';\nimport express from 'express';\nimport type { $Request, $Response } from 'express';\nimport { middleware as loggingMiddleware } from '../logging';\n\nconst fakeToken = 'eyakjla23oi4lkh12l5.31425iopsdag.ap9hhhkla';\n\ndescribe('logging.middleware', () => {\n  let app;\n\n  beforeAll(() => {\n    app = express();\n    app.use(loggingMiddleware('info'));\n    app.use((_: $Request, res: $Response) => res.sendStatus(200));\n  });\n\n  it('removes a token from the authorization header', async () => {\n    let capture = '';\n\n    const promise = hookStd.stdout((output, unhook) => {\n      unhook();\n      capture = output;\n    });\n\n    await supertest(app)\n      .get('/')\n      .set('authorization', `Bearer ${fakeToken}`)\n      .expect(200);\n\n    await promise;\n\n    expect(capture.includes(fakeToken)).toEqual(false);\n  });\n\n  it('removes a token from the query parameter', async () => {\n    let capture = '';\n\n    const promise = hookStd.stdout((output, unhook) => {\n      unhook();\n      capture = output;\n    });\n\n    await supertest(app)\n      .get(`/?ztoken=${fakeToken}`)\n      .expect(200);\n\n    await promise;\n    expect(capture.includes(fakeToken)).toEqual(false);\n  });\n});\n"]}