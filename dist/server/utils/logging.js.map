{"version":3,"sources":["../../../server/utils/logging.js"],"names":["setloglevel","level","winston","noop","log","context","color","luminosity","coloredContext","chalk","hex","makeLog","title","msg","debug","info","warn","error","middleware","loglevel","loggerMiddleware","colorize","expressFormat","requestWhitelist","transports","Console","noopMiddleware","_","__","next"],"mappings":";;;;;;;AAEA;;AACA;;;;AACA;;;;AACA;;;;;;AAGO,MAAMA,oCAAeC,KAAD,IAAmB;AAC5CC,oBAAQD,KAAR,GAAgBA,KAAhB;AACD,CAFM;;AAIP,MAAME,OAAO,MAAM,CAAE,CAArB;;AAEO,MAAMC,oBAAOC,OAAD,IAAqB;AACtC,QAAMC,QAAQ,2BAAY;AACxBC,gBAAY;AADY,GAAZ,CAAd;;AAIA,QAAMC,iBAAiBC,gBAAMC,GAAN,CAAUJ,KAAV,EAAiBD,OAAjB,CAAvB;;AAEA,QAAMM,UAAU,CAACV,KAAD,EAAQW,KAAR,KAAkB,CAAC,GAAGC,GAAJ,KAC/BX,kBAAQD,KAAR,KAAkB,KAAlB,GAA0BC,kBAAQD,KAAR,EAAeW,KAAf,EAAsB,GAAGC,GAAzB,CAA1B,GAA0DV,MAD7D;;AAGA,SAAO;AACLW,WAAOH,QAAQ,OAAR,EAAiBH,cAAjB,CADF;AAELO,UAAMJ,QAAQ,MAAR,EAAgBH,cAAhB,CAFD;AAGLQ,UAAML,QAAQ,MAAR,EAAgBH,cAAhB,CAHD;AAILS,WAAON,QAAQ,OAAR,EAAiBH,cAAjB;AAJF,GAAP;AAMD,CAhBM;;AAkBA,MAAMU,kCAAcC,QAAD,IAAkC;AAC1D,QAAMC,mBAAmB,4BAAO;AAC9BC,cAAU,IADoB;AAE9BC,mBAAe,KAFe;AAG9BC,sBAAkB,CAAC,KAAD,EAAQ,SAAR,EAAmB,QAAnB,EAA6B,aAA7B,EAA4C,OAA5C,CAHY;AAI9BV,SAAK,kCAJyB;AAK9BW,gBAAY,CACV,IAAItB,kBAAQsB,UAAR,CAAmBC,OAAvB,CAA+B;AAC7BxB,aAAOkB;AADsB,KAA/B,CADU;AALkB,GAAP,CAAzB;;AAYA,QAAMO,iBAAiB,CAACC,CAAD,EAAIC,EAAJ,EAAQC,IAAR,KAAiBA,MAAxC;;AAEA,SAAOV,aAAa,KAAb,GAAqBC,gBAArB,GAAwCM,cAA/C;AACD,CAhBM;;kBAkBQtB,G","file":"logging.js","sourcesContent":["/* @flow */\n\nimport { logger } from 'express-winston';\nimport winston from 'winston';\nimport chalk from 'chalk';\nimport randomColor from 'randomcolor';\nimport type { Middleware } from 'express';\n\nexport const setloglevel = (level: string) => {\n  winston.level = level;\n};\n\nconst noop = () => {};\n\nexport const log = (context: string) => {\n  const color = randomColor({\n    luminosity: 'light',\n  });\n\n  const coloredContext = chalk.hex(color)(context);\n\n  const makeLog = (level, title) => (...msg: *) =>\n    (winston.level !== 'off' ? winston[level](title, ...msg) : noop());\n\n  return {\n    debug: makeLog('debug', coloredContext),\n    info: makeLog('info', coloredContext),\n    warn: makeLog('warn', coloredContext),\n    error: makeLog('error', coloredContext),\n  };\n};\n\nexport const middleware = (loglevel: string): Middleware => {\n  const loggerMiddleware = logger({\n    colorize: true,\n    expressFormat: false,\n    requestWhitelist: ['url', 'headers', 'method', 'httpVersion', 'query'],\n    msg: 'HTTP {{req.method}} {{req.path}}',\n    transports: [\n      new winston.transports.Console({\n        level: loglevel,\n      }),\n    ],\n  });\n\n  const noopMiddleware = (_, __, next) => next();\n\n  return loglevel !== 'off' ? loggerMiddleware : noopMiddleware;\n};\n\nexport default log;\n"]}