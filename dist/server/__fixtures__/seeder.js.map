{"version":3,"sources":["../../../server/__fixtures__/seeder.js"],"names":["debug","readFileAsync","fs","readFile","getFixtureFor","table","fixture","undefined","Error","createTable","data","schemaJSON","path","join","__dirname","schema","JSON","parse","promise","waitFor","TableName","err","name","message","Promise","resolve","seedTable","requestItems","seed","map","PutRequest","Item","item","batchParams","RequestItems","batchWriteItem","dropTable","params","deleteTable","cleanTable","items","scan","deleletedItems","Items","DeleteRequest","Key","sessionID","batchWrite"],"mappings":"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","file":"seeder.js","sourcesContent":["/* @flow */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { promisify } from 'util';\n\nimport { dynamoDB, documentClient } from '../dynamoDB/db';\nimport { log } from '../utils/logging';\n\n// $FlowFixMe\nimport fixture from './data.json';\n\nconst { debug } = log('DynamoDB');\nconst readFileAsync = promisify(fs.readFile);\n\nconst getFixtureFor = (table) => {\n  if (fixture[table] === undefined) {\n    throw new Error(`The fixture for ${table} was not set`);\n  }\n\n  return fixture[table];\n};\n\ntype CreateTableDef = (table: string) => Promise<*>;\n\nexport const createTable: CreateTableDef = async (table) => {\n  const data = getFixtureFor(table);\n\n  debug(`Reading fixture for ${table}`);\n  const schemaJSON = await readFileAsync(path.join(__dirname, '../../', data.schema));\n  const schema = JSON.parse(schemaJSON);\n\n  try {\n    debug(`Creating table for ${table}`);\n    await dynamoDB()\n      .createTable(schema)\n      .promise();\n    return dynamoDB()\n      .waitFor('tableExists', { TableName: table })\n      .promise();\n  } catch (err) {\n    if (\n      err.name === 'ResourceInUseException' &&\n      err.message === 'Cannot create preexisting table'\n    ) {\n      return Promise.resolve();\n    }\n\n    throw err;\n  }\n};\n\ntype SeedTableDef = (table: string) => Promise<*>;\n\nexport const seedTable: SeedTableDef = async (table) => {\n  const data = getFixtureFor(table);\n\n  const requestItems = data.seed.map(item => ({\n    PutRequest: {\n      Item: {\n        ...item,\n      },\n    },\n  }));\n\n  const batchParams = {\n    RequestItems: {\n      [table]: [...requestItems],\n    },\n  };\n\n  debug(`Writing data for ${table}`);\n  return dynamoDB()\n    .batchWriteItem(batchParams)\n    .promise();\n};\n\ntype DropTableDef = (table: string) => Promise<*>;\n\nexport const dropTable: DropTableDef = async (table) => {\n  const params = { TableName: table };\n  try {\n    debug(`[DB] Dropping table ${table}`);\n    await dynamoDB()\n      .deleteTable(params)\n      .promise();\n    return dynamoDB()\n      .waitFor('tableNotExists', { TableName: table })\n      .promise();\n  } catch (err) {\n    if (err.name === 'ResourceNotFoundException') return Promise.resolve();\n\n    throw err;\n  }\n};\n\ntype CleanTableDef = (table: string) => Promise<*>;\n\nexport const cleanTable: CleanTableDef = async (table) => {\n  const params = { TableName: table };\n\n  const items = await documentClient()\n    .scan(params)\n    .promise();\n\n  const deleletedItems = items.Items.map(item => ({\n    DeleteRequest: {\n      Key: {\n        sessionID: item.sessionID,\n      },\n    },\n  }));\n\n  const batchParams = {\n    RequestItems: {\n      [table]: deleletedItems,\n    },\n  };\n\n  debug(`Cleaning up table ${table}`);\n  return documentClient()\n    .batchWrite(batchParams)\n    .promise();\n};\n"]}