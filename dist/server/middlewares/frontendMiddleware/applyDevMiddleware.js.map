{"version":3,"sources":["../../../../server/middlewares/frontendMiddleware/applyDevMiddleware.js"],"names":["relativeWebpackConfigPath","webpackConfigPath","path","resolve","process","cwd","webpackConfig","require","applyProdMiddleware","app","compiler","middleware","noInfo","publicPath","output","silent","stats","writeToDisk","filePath","test","use","fs","fileSystem","get","req","res","readFile","join","outputPath","err","file","sendStatus","send","toString"],"mappings":";;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,MAAMA,4BAA4B,CAAC,WAAD,EAAc,SAAd,EAAyB,gBAAzB,CAAlC;AACA,MAAMC,oBAAoBC,eAAKC,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B,GAAGL,yBAA/B,CAA1B;;AAEA;AACA,MAAMM,gBAAgBC,QAAQN,iBAAR,CAAtB,C,CAAkD;;AAElD,MAAMO,sBAAuBC,GAAD,IAAuB;AACjD,QAAMC,WAAW,uBAAQJ,aAAR,CAAjB;;AAEA,QAAMK,aAAa,oCAAqBD,QAArB,EAA+B;AAChDE,YAAQ,IADwC;AAEhDC,gBAAYP,cAAcQ,MAAd,CAAqBD,UAFe;AAGhDE,YAAQ,IAHwC;AAIhDC,WAAO,aAJyC;AAKhDC,gBAAYC,QAAZ,EAAsB;AACpB,aAAO,eAAcC,IAAd,CAAmBD,QAAnB;AAAP;AACD;AAP+C,GAA/B,CAAnB;;AAUAT,MAAIW,GAAJ,CAAQT,UAAR;AACAF,MAAIW,GAAJ,CAAQ,oCAAqBV,QAArB,CAAR;;AAEA,QAAMW,KAAKV,WAAWW,UAAtB;;AAEAb,MAAIc,GAAJ,CAAQ,YAAR,EAAsB,CAACC,GAAD,EAAgBC,GAAhB,KAAmC;AACvDJ,OAAGK,QAAH,CAAYxB,eAAKyB,IAAL,CAAUjB,SAASkB,UAAnB,EAA+B,YAA/B,CAAZ,EAA0D,CAACC,GAAD,EAAMC,IAAN,KAAe;AACvE,UAAID,GAAJ,EAAS;AACPJ,YAAIM,UAAJ,CAAe,GAAf;AACD,OAFD,MAEO;AACLN,YAAIO,IAAJ,CAASF,KAAKG,QAAL,EAAT;AACD;AACF,KAND;AAOD,GARD;AASD,CA3BD;;kBA6BezB,mB","file":"applyDevMiddleware.js","sourcesContent":["/* @flow */\n\nimport path from 'path';\nimport webpack from 'webpack';\nimport webpackDevMiddleware from 'webpack-dev-middleware';\nimport webpackHotMiddleware from 'webpack-hot-middleware';\nimport type { $Application, $Request, $Response } from 'express';\n\nconst relativeWebpackConfigPath = ['internals', 'webpack', 'webpack.dev.js'];\nconst webpackConfigPath = path.resolve(process.cwd(), ...relativeWebpackConfigPath);\n\n// $FlowFixMe\nconst webpackConfig = require(webpackConfigPath); // eslint-disable-line import/no-dynamic-require\n\nconst applyProdMiddleware = (app: $Application) => {\n  const compiler = webpack(webpackConfig);\n\n  const middleware = webpackDevMiddleware(compiler, {\n    noInfo: true,\n    publicPath: webpackConfig.output.publicPath,\n    silent: true,\n    stats: 'errors-only',\n    writeToDisk(filePath) {\n      return /index\\.ejs$/.test(filePath);\n    },\n  });\n\n  app.use(middleware);\n  app.use(webpackHotMiddleware(compiler));\n\n  const fs = middleware.fileSystem;\n\n  app.get('/selection', (req: $Request, res: $Response) => {\n    fs.readFile(path.join(compiler.outputPath, 'index.html'), (err, file) => {\n      if (err) {\n        res.sendStatus(404);\n      } else {\n        res.send(file.toString());\n      }\n    });\n  });\n};\n\nexport default applyProdMiddleware;\n"]}