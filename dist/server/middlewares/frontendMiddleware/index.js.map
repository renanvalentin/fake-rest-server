{"version":3,"sources":["../../../../server/middlewares/frontendMiddleware/index.js"],"names":["logger","getApplyFunction","env","info","applyProdMiddleware","require","default","error","Error","applyFrontendMiddleware","app","applyMiddleware","config"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;;;AAEA,MAAMA,SAAS,kBAAI,qBAAJ,CAAf;;AAIA,MAAMC,mBAAoBC,GAAD,IAAuD;AAC9E,UAAQA,GAAR;AACE,SAAK,YAAL;AACA,SAAK,MAAL;AACEF,aAAOG,IAAP,CAAY,qDAAZ;AACA,aAAOC,6BAAP;;AAEF,SAAK,aAAL;AACEJ,aAAOG,IAAP,CAAY,mEAAZ;;AAEA;AACA;AACA,aAAOE,QAAQ,sBAAR,EAAgCC,OAAvC;AACF;;AAEA;AACEN,aAAOO,KAAP,CAAc,oDAAmDL,GAAI,EAArE;AACA,YAAMM,MAAO,kBAAiBN,GAAI,kBAA5B,CAAN;AAhBJ;AAkBD,CAnBD;;AAqBA,MAAMO,0BAAsDC,GAAD,IAAS;AAClE,QAAMC,kBAAkBV,iBAAiBW,iBAAOV,GAAxB,CAAxB;AACAS,kBAAgBD,GAAhB;AACD,CAHD;;kBAKeD,uB","file":"index.js","sourcesContent":["/* @flow */\n\nimport type { $Application } from 'express';\n\nimport config from '../../config';\nimport { log } from '../../utils/logging';\nimport applyProdMiddleware from './applyProdMiddleware';\n\nconst logger = log('frontend middleware');\n\ntype FrontendMiddlewareApplyFn = $Application => void;\n\nconst getApplyFunction = (env: typeof config.env): FrontendMiddlewareApplyFn => {\n  switch (env) {\n    case 'production':\n    case 'test':\n      logger.info('Applying production middleware for frontend serving');\n      return applyProdMiddleware;\n\n    case 'development':\n      logger.info('Applying development middleware for frontend building and serving');\n\n      /* eslint-disable global-require, import/no-dynamic-require */\n      // $FlowFixMe\n      return require('./applyDevMiddleware').default;\n    /* eslint-enable global-require, import/no-dynamic-require */\n\n    default:\n      logger.error(`There is no supported middleware for environment ${env}`);\n      throw Error(`Middleware for ${env} not implemented`);\n  }\n};\n\nconst applyFrontendMiddleware: FrontendMiddlewareApplyFn = (app) => {\n  const applyMiddleware = getApplyFunction(config.env);\n  applyMiddleware(app);\n};\n\nexport default applyFrontendMiddleware;\n"]}